{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund_to_zero",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xea54d9da43bb838a747e81b87961fae4f77ffa746d2716c4536f68ca685b2722",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1056114",
    "logsBloom": "0x
    "blockHash": "0x868dbdc54498ab5eb80dcf217c6522eb828ce3438dec49e87e09841ab2276169",
    "transactionHash": "0xea54d9da43bb838a747e81b87961fae4f77ffa746d2716c4536f68ca685b2722",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1056114",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "bc5446fe1f3ff8745bd4891cb6c042ec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund_to_zero\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"freecodecamp and Jesus Inurria\",\"details\":\"this impliments price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"withdraw()\":{\"details\":\"implements price feed as library \"}},\"title\":\"A contract for crownd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"withdraw()\":{\"notice\":\"This function  funds this contract\"}},\"notice\":\"this contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\nerror FundMe__NotEnoughEth();\\n//Interfaces or libraries goes here\\n\\n/**\\n * @title A contract for crownd funding\\n * @author freecodecamp and Jesus Inurria\\n * @notice this contract is to demo a sample funding contract\\n * @dev this impliments price feeds as our library\\n */\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address private  immutable  i_owner;\\n    uint256 public constant MINIMUM_USD = 10; // ten dolars \\n    \\n    AggregatorV3Interface private s_priceFeed;\\n\\n    modifier onlyOwner {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n    modifier notEnoughEth {\\n        if (!(msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD)) revert FundMe__NotEnoughEth();\\n        _;\\n    }\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    function fund() public payable {\\n        //If use error instead of requiere we can earn the gas from the str\\n        require(msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n    function fund_to_zero() public{\\n        s_addressToAmountFunded[msg.sender] = 0;\\n    }\\n   \\n    \\n\\n    /**\\n     *  @notice This function  funds this contract\\n     * @dev implements price feed as library\\n     * \\n     */\\n    function withdraw() public onlyOwner {\\n        for (uint256 funderIndex=0; funderIndex < s_funders.length; funderIndex++){\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n\\n    function cheaperWithdraw() public payable onlyOwner{\\n        // mappins cant be in memory\\n        // we are gona copy the variable s_funders\\n        //work with the copy \\n        //when we finish we update the s_funders with the data of (local) funders\\n        address[] memory funders = s_funders;\\n        for ( uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++){\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address [](0);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n    // Explainer from: https://solidity-by-example.org/fallback/\\n    // Ether is sent to contract\\n    //      is msg.data empty?\\n    //          /   \\\\ \\n    //         yes  no\\n    //         /     \\\\\\n    //    receive()?  fallback() \\n    //     /   \\\\ \\n    //   yes   no\\n    //  /        \\\\\\n    //receive()  fallback()\\n\\n    function getOwner() public view  returns(address){\\n        return i_owner;\\n    }\\n    function getFunder(uint index) public view returns(address){\\n        return s_funders[index];\\n    }\\n    function getAddressToAmountFunded(address funder) public view returns(uint256){\\n        return s_addressToAmountFunded[funder];\\n    }\\n    function getPriceFeed() public view returns(AggregatorV3Interface){\\n        return s_priceFeed;\\n    }\\n\\n}\\n\\n\\n// test\",\"keccak256\":\"0xe1eba6578588ff967403af20df3906d7c4e768d0f0bf16935805624988fb8add\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        \\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n        // or (Both will do the same thing)\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // or (Both will do the same thing)\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\",\"keccak256\":\"0xa7a2a8c311436b90069e45378a9766335ed308493f38495566c0c30c3b394d69\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200134138038062001341833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6111bb62000186600039600081816103a2015281816105e901528181610639015261082f01526111bb6000f3fe60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e8146101395780639e87a5cd14610164578063b60d42881461018f578063be2693f014610199578063d7b4750c146101a357610099565b80630343fb25146100a35780631266c183146100e05780633ccfd60b146100f75780636b69a5921461010e57610099565b36610099576100976101e0565b005b6100a16101e0565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610af3565b610312565b6040516100d79190610b39565b60405180910390f35b3480156100ec57600080fd5b506100f561035a565b005b34801561010357600080fd5b5061010c6103a0565b005b34801561011a57600080fd5b506101236105e0565b6040516101309190610b39565b60405180910390f35b34801561014557600080fd5b5061014e6105e5565b60405161015b9190610b63565b60405180910390f35b34801561017057600080fd5b5061017961060d565b6040516101869190610bdd565b60405180910390f35b6101976101e0565b005b6101a1610637565b005b3480156101af57600080fd5b506101ca60048036038101906101c59190610c24565b6108c5565b6040516101d79190610b63565b60405180910390f35b600a610217600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461090d90919063ffffffff16565b1015610258576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024f90610cae565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102a69190610cfd565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610425576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156104d05760006001828154811061044b5761044a610d53565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104c890610d82565b915050610428565b50600067ffffffffffffffff8111156104ec576104eb610dcb565b5b60405190808252806020026020018201604052801561051a5781602001602082028036833780820191505090505b50600190805190602001906105309291906109e9565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161055790610e2b565b60006040518083038185875af1925050503d8060008114610594576040519150601f19603f3d011682016040523d82523d6000602084013e610599565b606091505b50509050806105dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d490610e8c565b60405180910390fd5b50565b600a81565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106bc576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561074057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106f6575b5050505050905060005b81518110156107ca57600082828151811061076857610767610d53565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107c290610d82565b91505061074a565b50600067ffffffffffffffff8111156107e6576107e5610dcb565b5b6040519080825280602002602001820160405280156108145781602001602082028036833780820191505090505b506001908051906020019061082a9291906109e9565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161087190610e2b565b60006040518083038185875af1925050503d80600081146108ae576040519150601f19603f3d011682016040523d82523d6000602084013e6108b3565b606091505b50509050806108c157600080fd5b5050565b6000600182815481106108db576108da610d53565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061091983610949565b90506000670de0b6b3a764000085836109329190610eac565b61093c9190610f35565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561099257600080fd5b505afa1580156109a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ca9190610ff3565b5050509150506402540be400816109e1919061106e565b915050919050565b828054828255906000526020600020908101928215610a62579160200282015b82811115610a615782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a09565b5b509050610a6f9190610a73565b5090565b5b80821115610a8c576000816000905550600101610a74565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ac082610a95565b9050919050565b610ad081610ab5565b8114610adb57600080fd5b50565b600081359050610aed81610ac7565b92915050565b600060208284031215610b0957610b08610a90565b5b6000610b1784828501610ade565b91505092915050565b6000819050919050565b610b3381610b20565b82525050565b6000602082019050610b4e6000830184610b2a565b92915050565b610b5d81610ab5565b82525050565b6000602082019050610b786000830184610b54565b92915050565b6000819050919050565b6000610ba3610b9e610b9984610a95565b610b7e565b610a95565b9050919050565b6000610bb582610b88565b9050919050565b6000610bc782610baa565b9050919050565b610bd781610bbc565b82525050565b6000602082019050610bf26000830184610bce565b92915050565b610c0181610b20565b8114610c0c57600080fd5b50565b600081359050610c1e81610bf8565b92915050565b600060208284031215610c3a57610c39610a90565b5b6000610c4884828501610c0f565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610c98601b83610c51565b9150610ca382610c62565b602082019050919050565b60006020820190508181036000830152610cc781610c8b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d0882610b20565b9150610d1383610b20565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d4857610d47610cce565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d8d82610b20565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610dc057610dbf610cce565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610e15600083610dfa565b9150610e2082610e05565b600082019050919050565b6000610e3682610e08565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610e76600b83610c51565b9150610e8182610e40565b602082019050919050565b60006020820190508181036000830152610ea581610e69565b9050919050565b6000610eb782610b20565b9150610ec283610b20565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610efb57610efa610cce565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f4082610b20565b9150610f4b83610b20565b925082610f5b57610f5a610f06565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f8581610f66565b8114610f9057600080fd5b50565b600081519050610fa281610f7c565b92915050565b6000819050919050565b610fbb81610fa8565b8114610fc657600080fd5b50565b600081519050610fd881610fb2565b92915050565b600081519050610fed81610bf8565b92915050565b600080600080600060a0868803121561100f5761100e610a90565b5b600061101d88828901610f93565b955050602061102e88828901610fc9565b945050604061103f88828901610fde565b935050606061105088828901610fde565b925050608061106188828901610f93565b9150509295509295909350565b600061107982610fa8565b915061108483610fa8565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110c3576110c2610cce565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615611100576110ff610cce565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561113d5761113c610cce565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561117a57611179610cce565b5b82820290509291505056fea26469706673582212206f6917bb465240fd11463348fe1bb844f288b94dc6e281b0143de9940c443ec964736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e8146101395780639e87a5cd14610164578063b60d42881461018f578063be2693f014610199578063d7b4750c146101a357610099565b80630343fb25146100a35780631266c183146100e05780633ccfd60b146100f75780636b69a5921461010e57610099565b36610099576100976101e0565b005b6100a16101e0565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610af3565b610312565b6040516100d79190610b39565b60405180910390f35b3480156100ec57600080fd5b506100f561035a565b005b34801561010357600080fd5b5061010c6103a0565b005b34801561011a57600080fd5b506101236105e0565b6040516101309190610b39565b60405180910390f35b34801561014557600080fd5b5061014e6105e5565b60405161015b9190610b63565b60405180910390f35b34801561017057600080fd5b5061017961060d565b6040516101869190610bdd565b60405180910390f35b6101976101e0565b005b6101a1610637565b005b3480156101af57600080fd5b506101ca60048036038101906101c59190610c24565b6108c5565b6040516101d79190610b63565b60405180910390f35b600a610217600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461090d90919063ffffffff16565b1015610258576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024f90610cae565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102a69190610cfd565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610425576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156104d05760006001828154811061044b5761044a610d53565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104c890610d82565b915050610428565b50600067ffffffffffffffff8111156104ec576104eb610dcb565b5b60405190808252806020026020018201604052801561051a5781602001602082028036833780820191505090505b50600190805190602001906105309291906109e9565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161055790610e2b565b60006040518083038185875af1925050503d8060008114610594576040519150601f19603f3d011682016040523d82523d6000602084013e610599565b606091505b50509050806105dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d490610e8c565b60405180910390fd5b50565b600a81565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106bc576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561074057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106f6575b5050505050905060005b81518110156107ca57600082828151811061076857610767610d53565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107c290610d82565b91505061074a565b50600067ffffffffffffffff8111156107e6576107e5610dcb565b5b6040519080825280602002602001820160405280156108145781602001602082028036833780820191505090505b506001908051906020019061082a9291906109e9565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161087190610e2b565b60006040518083038185875af1925050503d80600081146108ae576040519150601f19603f3d011682016040523d82523d6000602084013e6108b3565b606091505b50509050806108c157600080fd5b5050565b6000600182815481106108db576108da610d53565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061091983610949565b90506000670de0b6b3a764000085836109329190610eac565b61093c9190610f35565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561099257600080fd5b505afa1580156109a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ca9190610ff3565b5050509150506402540be400816109e1919061106e565b915050919050565b828054828255906000526020600020908101928215610a62579160200282015b82811115610a615782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a09565b5b509050610a6f9190610a73565b5090565b5b80821115610a8c576000816000905550600101610a74565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ac082610a95565b9050919050565b610ad081610ab5565b8114610adb57600080fd5b50565b600081359050610aed81610ac7565b92915050565b600060208284031215610b0957610b08610a90565b5b6000610b1784828501610ade565b91505092915050565b6000819050919050565b610b3381610b20565b82525050565b6000602082019050610b4e6000830184610b2a565b92915050565b610b5d81610ab5565b82525050565b6000602082019050610b786000830184610b54565b92915050565b6000819050919050565b6000610ba3610b9e610b9984610a95565b610b7e565b610a95565b9050919050565b6000610bb582610b88565b9050919050565b6000610bc782610baa565b9050919050565b610bd781610bbc565b82525050565b6000602082019050610bf26000830184610bce565b92915050565b610c0181610b20565b8114610c0c57600080fd5b50565b600081359050610c1e81610bf8565b92915050565b600060208284031215610c3a57610c39610a90565b5b6000610c4884828501610c0f565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610c98601b83610c51565b9150610ca382610c62565b602082019050919050565b60006020820190508181036000830152610cc781610c8b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d0882610b20565b9150610d1383610b20565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d4857610d47610cce565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d8d82610b20565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610dc057610dbf610cce565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610e15600083610dfa565b9150610e2082610e05565b600082019050919050565b6000610e3682610e08565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610e76600b83610c51565b9150610e8182610e40565b602082019050919050565b60006020820190508181036000830152610ea581610e69565b9050919050565b6000610eb782610b20565b9150610ec283610b20565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610efb57610efa610cce565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f4082610b20565b9150610f4b83610b20565b925082610f5b57610f5a610f06565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f8581610f66565b8114610f9057600080fd5b50565b600081519050610fa281610f7c565b92915050565b6000819050919050565b610fbb81610fa8565b8114610fc657600080fd5b50565b600081519050610fd881610fb2565b92915050565b600081519050610fed81610bf8565b92915050565b600080600080600060a0868803121561100f5761100e610a90565b5b600061101d88828901610f93565b955050602061102e88828901610fc9565b945050604061103f88828901610fde565b935050606061105088828901610fde565b925050608061106188828901610f93565b9150509295509295909350565b600061107982610fa8565b915061108483610fa8565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110c3576110c2610cce565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615611100576110ff610cce565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561113d5761113c610cce565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561117a57611179610cce565b5b82820290509291505056fea26469706673582212206f6917bb465240fd11463348fe1bb844f288b94dc6e281b0143de9940c443ec964736f6c63430008080033",
  "devdoc": {
    "author": "freecodecamp and Jesus Inurria",
    "details": "this impliments price feeds as our library",
    "kind": "dev",
    "methods": {
      "withdraw()": {
        "details": "implements price feed as library "
      }
    },
    "title": "A contract for crownd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "withdraw()": {
        "notice": "This function  funds this contract"
      }
    },
    "notice": "this contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 61,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 64,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 72,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}